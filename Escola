
package projetoescola;
import java.util.ArrayList;
import java.util.List;

public class Escola {
    private String nome, endereco, nId;
    private int anofundacao;
    private Diretor diretor;
    private List<Diretor> diretores;
    private List<Professor> professores;
    private List<Aluno> alunos;
    private Curso curso;
    private List<Curso> cursos;
    
    
    
    
    public Escola(String nome, String endereco, String nId, int anofundacao) {
        this.nome = nome;
        this.endereco = endereco;
        this.nId = nId;
        this.anofundacao = anofundacao;
        this.diretor= null;
        this.professores = new ArrayList<>();
        this.cursos = new ArrayList<>();
        this.alunos = new ArrayList<>();
        this.diretores = new ArrayList<>();
    }

    public String getnome() {
        return nome;
    }

    public void setnome(String nome) {
        if(nome.length() > 0)
        this.nome = nome;
    }

    public String getEndereco() {
        return endereco;
    }

    public void setEndereco(String endereco) {
        if(endereco.length() > 0)
        this.endereco = endereco;
    }

    public String getnId() {
        
        return nId;
    }

    public void setnId(String nId) {
         if(nId.length() > 0)
        this.nId = nId;
    }

    public int getAnofundacao() {
        
        return anofundacao;
    }

    public void setAnofundacao(int anofundacao) {
          if(anofundacao > 0)
        this.anofundacao = anofundacao;
    }
    
    
    public void Associardiretor(String diretorAssociado, String idDiretorinput, String datacontratacaoinput,String cpfinput ){
      Diretor novoDiretor = new Diretor (diretorAssociado , idDiretorinput , datacontratacaoinput , cpfinput);
      this.diretores.add(novoDiretor);
   }
    
    public void adicionarprofessor (String professor, int idprofessor, String datacontratacao, String cpf){
        Professor novoProfessor = new Professor(professor, idprofessor, datacontratacao, cpf);
         this.professores.add(novoProfessor);
    }
   
    public void adicionaraluno (String nome, String cpf,  int num_matricula, String serie, String data_inscricao,int idade){
        Aluno novoAluno = new Aluno(nome, cpf,num_matricula, serie, data_inscricao, idade);
        this.alunos.add(novoAluno); 
       
    }
    
   public void adicionarCurso(String nome, String descricao, int codigo, int anoInicio) {
        Curso novoCurso = new Curso(nome, descricao, codigo, anoInicio);
        this.cursos.add(novoCurso);
    }
    
    
   public void associarProfessorAoCurso(String professorNome, int idProfessor, String dataContratacao, String cpf) {
        Professor novoProfessor = new Professor(professorNome, idProfessor, dataContratacao, cpf);
        if (!cursos.isEmpty()) {
            
            Curso ultimoCurso = this.cursos.get(this.cursos.size() - 1);
            
            
           if (ultimoCurso.getProfessor() == null || !ultimoCurso.getProfessor().temMesmoId(novoProfessor)) {
            ultimoCurso.setProfessor(novoProfessor);
        } else {
            System.out.println("Erro: Professor com o mesmo ID já associado a este curso.");
        }
    } else {
        System.out.println("Erro: Nenhum curso encontrado para associar o professor.");
    }
    }
   
  public void associarAlunoAoCurso(String alunoNome, int numMatricula, int codigoCurso, int idade) {
    

    // Encontrar o curso 
    Curso cursoAssociado = null;
    for (Curso curso : cursos) {
        if (curso.getCodigo() == codigoCurso) {
            cursoAssociado = curso;
            break;
        }
    }

    if (cursoAssociado != null) {
     
        Aluno novoAluno = new Aluno(alunoNome, "", numMatricula, "", "", idade);
        // Associar o aluno ao curso
        cursoAssociado.adicionarAluno(novoAluno);
    } else {
        System.out.println("Erro: Nenhum curso encontrado com o código fornecido.");
    }

}
  
  

  public void AdicionarNota (int numMatricula, double nota1, double nota2) {
      for (Curso curso : cursos) {  
      for (Aluno aluno : curso.getAlunos()) {
            if (aluno.getNum_matricula() == numMatricula) {
                aluno.setNota1(nota1);
                aluno.setNota2(nota2);
                return;
            }
        }
      }
        System.out.println("Erro: Aluno não encontrado com o número de matrícula fornecido.");
    }
  
  
   
   
    //DEBUG PARA RELATORIO 
  public void mostrarNotasETurmas() {
    System.out.println("Notas e Média da Turma:");

    for (Curso curso : cursos) {
        System.out.println("Curso: " + curso.getNome());

        // Verificar se há alunos no curso
        if (!curso.getAlunos().isEmpty()) {
            System.out.println("Alunos:");

            // Mostrar notas de cada aluno
            for (Aluno aluno : curso.getAlunos()) {
                System.out.println("Nome do Aluno: " + aluno.getNome());
                System.out.println("Número de Matrícula: " + aluno.getNum_matricula());
                System.out.println("Nota 1: " + aluno.getNota1());
                System.out.println("Nota 2: " + aluno.getNota2());
                System.out.println("Média do Aluno: " + aluno.calcularMedia());
                System.out.println("-------------------");
            }

            // Calcular e mostrar a média da turma
            double mediaTurma = calcularMediaTurma(curso.getAlunos());
            System.out.println("Média da Turma: " + mediaTurma);
        } else {
            System.out.println("Nenhum aluno inscrito neste curso.");
        }

        System.out.println("=======================================");
    }
}

// Método para calcular a média da turma
    private double calcularMediaTurma(List<Aluno> alunos) {
    if (alunos.isEmpty()) {
        return 0.0;
    }

    double somaNotas = 0;
    for (Aluno aluno : alunos) {
        somaNotas += aluno.calcularMedia();
    }

    return somaNotas / alunos.size();
}
  
  
  
  
    //metodo para calcular media da turma
 
    
   
   
  
  
  
  
  
  
  
  

       //debug 
       
   public void detalhes() {
    System.out.println("Diretor: " + (this.diretor != null ? this.diretor.getNome() : "Nenhum diretor associado"));

    System.out.println("Professores:");

    for (Professor professor : professores) {
        System.out.println("Nome do Professor: " + professor.getNome());
    }

    System.out.println("Alunos:");

    for (Aluno aluno : alunos) {
        System.out.println("Nome do Aluno: " + aluno.getNome());
    }

    System.out.println("Cursos:");

    for (Curso curso : cursos) {
        System.out.println("Detalhes do Curso:");
        System.out.println("Nome do Curso: " + curso.getNome());
        System.out.println("Descrição do Curso: " + curso.getDescricao());

        Professor professorDoCurso = curso.getProfessor();
        if (professorDoCurso != null) {
            System.out.println("Nome do Professor do Curso: " + professorDoCurso.getNome());
        } else {
            System.out.println("Nenhum professor associado a este curso.");
        }

        System.out.println("Alunos do Curso:");

        for (Aluno aluno : curso.getAlunos()) {
            System.out.println("Nome do Aluno: " + aluno.getNome() + ", Número de Matrícula: " + aluno.getNum_matricula());
        }
    }
}

public void detalhes1() {
    System.out.println("Diretor: " + (this.diretor != null ? this.diretor.getNome() : "Nenhum diretor associado"));

    System.out.println("Professores:");

    for (Professor professor : professores) {
        System.out.println("Nome do Professor: " + professor.getNome());
    }

    System.out.println("Alunos:");

    for (Aluno aluno : alunos) {
        System.out.println("Nome do Aluno: " + aluno.getNome());
    }

    System.out.println("Cursos:");

    for (Curso curso : cursos) {
        System.out.println("Detalhes do Curso:");
        System.out.println("Nome do Curso: " + curso.getNome());
        System.out.println("Descrição do Curso: " + curso.getDescricao());

        Professor professorDoCurso = curso.getProfessor();
        if (professorDoCurso != null) {
            System.out.println("Nome do Professor do Curso: " + professorDoCurso.getNome());
        } else {
            System.out.println("Nenhum professor associado a este curso.");
        }

        System.out.println("Alunos do Curso:");

        for (Aluno aluno : curso.getAlunos()) {
            System.out.println("Nome do Aluno: " + aluno.getNome() + ", Número de Matrícula: " + aluno.getNum_matricula());
        }
    }
}

       
       
   }

        
    
    

